package tetris.view;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Queue;

import javax.swing.JFrame;
import javax.swing.JPanel;

import tetris.model.Block;
import tetris.model.BlockType;
import tetris.model.Tetromino;

public class TetrisView extends JFrame
{
	private static final long serialVersionUID = 6411499808530678723L;
	
	private int blockSize;
	private int numRows;
	private int numCols;
	
	public TetrisView(Color background)
	{		
		setTitle("Tetris");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		paintPanel = new PaintPanel();
		numRows = 20;
		numCols = 10;
		blockSize = 20;
		getContentPane().setBackground(background);
		initComponents();
	}
	
	public void setBlockSize(int blockSize)
	{
		this.blockSize = blockSize;
	}
	
	public void setNumRows(int numRows)
	{
		this.numRows = numRows;
	}
	
	public void setNumCols(int numCols)
	{
		this.numCols = numCols;
	}
	
	public void enqueue(Collection<Block> toRender)
	{
		paintPanel.enqueue(toRender);
	}
	
	public void render()
	{
		paintPanel.repaint();
	}
	
	public Color getBackground()
	{
		return getContentPane().getBackground();
	}
	
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

    	holdPanel = new HoldPanel(getBackground());
    	nextPanel = new NextPanel(getBackground());
        linesPanel = new LinesPanel(getBackground());
        levelPanel = new LevelPanel(getBackground());
        scorePanel = new ScorePanel(getBackground());
        statisticsPanel = new StatisticsPanel(getBackground());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        
        paintPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(), javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED)));

//        javax.swing.GroupLayout paintPanelLayout = new javax.swing.GroupLayout(paintPanel);
//        paintPanel.setLayout(paintPanelLayout);
//        paintPanelLayout.setHorizontalGroup(
//            paintPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//            .addGap(0, 0, Short.MAX_VALUE)
//        );
//        paintPanelLayout.setVerticalGroup(
//            paintPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//            .addGap(0, 400, Short.MAX_VALUE)
//        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statisticsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(holdPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(linesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(paintPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scorePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nextPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(levelPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(linesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(holdPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(statisticsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(scorePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(nextPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(levelPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(paintPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>
    
    public void setScore(long score)
    {
    	scorePanel.setScore(score);
    }
    
    public void setHighScore(long highScore)
    {
    	scorePanel.setHighScore(highScore);
    }
    
    public void setNumLines(int numLines)
    {
    	linesPanel.setNumLines(numLines);
    }
    
    public void setLevel(int levelNum)
    {
    	levelPanel.setLevelNum(levelNum);
    }
    
    public void setNext(BlockType type)
    {
    	nextPanel.setTetromino(Tetromino.getPiece(type));
    }
    
    public void setHold(BlockType type)
    {
    	holdPanel.setTetromino(Tetromino.getPiece(type));
    }
    
    public void setStatistics()
    {
    	
    }
    
	private class PaintPanel extends JPanel
	{
		private static final long serialVersionUID = -3690563991928805574L;

		private Queue<Block> renderQueue;
		
		public PaintPanel()
		{
			renderQueue = new LinkedList<Block>();
		}
		
		public void enqueue(Collection<Block> toRender)
		{
			renderQueue.addAll(toRender);
		}
		
		public Dimension getPreferredSize()
		{
			int width = numCols * blockSize;
			int height = numRows * blockSize;
			return new Dimension(width, height);
		}
		
		public void paint(Graphics g)
		{
			g.setColor(Color.BLACK);
			g.fillRect(0, 0, getWidth(), getHeight());
			
			int xShift = 0;
			int yShift = getHeight();
			
			while(renderQueue.isEmpty() == false)
			{
				Block block = renderQueue.poll();
				if(block != null)
					block.render(g, blockSize, xShift, yShift);
			}
		}
	}
	
    // Variables declaration - do not modify                     
    private HoldPanel holdPanel;
    private NextPanel nextPanel;
	private LevelPanel levelPanel;
    private LinesPanel linesPanel;
    private PaintPanel paintPanel;
    private ScorePanel scorePanel;
    private StatisticsPanel statisticsPanel;
    // End of variables declaration    
}
